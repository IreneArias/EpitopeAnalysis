epitopeAnalysis <- function() {
args <- commandArgs(trailingOnly = TRUE)
path <- getwd()
data_path <- paste(path,args[1],sep = "/")
files <- Sys.glob(file.path(data_path, "*.txt"))
`%nin%` = Negate(`%in%`)
all_possibilities <- function(list_,min_size,max_size) {
all <- list()
for (ele in list_){
for (i in  min_size:max_size){
for (j in  0:max_size-min_size){
part <- substr(ele,i-min_size,i+j)
if (nchar(part) >= min_size){
if (part %nin% all){
all <- append(all,part)
}
}
}
}
}
return(all)
}
present_in_epitope <- function(seq,seq_list){
result <- 0
for (epi in seq_list){
tmp <- grepl(seq, epi, fixed = TRUE)
if (tmp == TRUE){
result <- 1
}
}
return(result)
}
list_ <- list()
for (file in files) {
tmp <- read.table(file,header=FALSE)
list_ <- append(list_,tmp)
}
smallest <- 1e10
largest <- 0
all_seq = unlist(list_,use.names = FALSE)
freq_x <- sort(table(unlist(strsplit(all_seq, ""))))
for (seq in all_seq){
size = nchar(seq)
if (size >= largest) {
largest <- size
}
if (size <= smallest) {
smallest <- size
}
}
sprintf("The shortest sequence found is: %s", smallest)
sprintf("The largest sequence found is: %s", largest)
all <- all_possibilities(all_seq,smallest,largest)
print(length(all))
}
library(epitopeAnalysis)
?epitopeAnalysis
devtools::load_all(".")
rm(list = c("epitopeAnalysis"))
?epitopeAnalysis
#' epitopeAnalysis
#'
#' @return
#' @export
#'
#' @examples YTMSLGAEN
epitopeAnalysis <- function() {
args <- commandArgs(trailingOnly = TRUE)
path <- getwd()
data_path <- paste(path,args[1],sep = "/")
files <- Sys.glob(file.path(data_path, "*.txt"))
`%nin%` = Negate(`%in%`)
all_possibilities <- function(list_,min_size,max_size) {
all <- list()
for (ele in list_){
for (i in  min_size:max_size){
for (j in  0:max_size-min_size){
part <- substr(ele,i-min_size,i+j)
if (nchar(part) >= min_size){
if (part %nin% all){
all <- append(all,part)
}
}
}
}
}
return(all)
}
present_in_epitope <- function(seq,seq_list){
result <- 0
for (epi in seq_list){
tmp <- grepl(seq, epi, fixed = TRUE)
if (tmp == TRUE){
result <- 1
}
}
return(result)
}
list_ <- list()
for (file in files) {
tmp <- read.table(file,header=FALSE)
list_ <- append(list_,tmp)
}
smallest <- 1e10
largest <- 0
all_seq = unlist(list_,use.names = FALSE)
freq_x <- sort(table(unlist(strsplit(all_seq, ""))))
for (seq in all_seq){
size = nchar(seq)
if (size >= largest) {
largest <- size
}
if (size <= smallest) {
smallest <- size
}
}
sprintf("The shortest sequence found is: %s", smallest)
sprintf("The largest sequence found is: %s", largest)
all <- all_possibilities(all_seq,smallest,largest)
print(length(all))
}
?epitopeAnalysis
devtools::load_all(".")
rm(list = c("epitopeAnalysis"))
library(epitopeAnalysis)
?epitopeAnalysis
WordFrequency <-sort(table(unlist(strsplit(all_seq, ""))))
#' epitopeAnalysis
#'
#' @return
#' @export
#'
#' @examples "YTMSLGAEN"
epitope_Analysis <- function() {
args <- commandArgs(trailingOnly = TRUE)
path <- getwd()
data_path <- paste(path,args[1],sep = "/")
files <- Sys.glob(file.path(data_path, "*.txt"))
`%nin%` = Negate(`%in%`)
all_possibilities <- function(list_,min_size,max_size) {
all <- list()
for (ele in list_){
for (i in  min_size:max_size){
for (j in  0:max_size-min_size){
part <- substr(ele,i-min_size,i+j)
if (nchar(part) >= min_size){
if (part %nin% all){
all <- append(all,part)
}
}
}
}
}
return(all)
}
present_in_epitope <- function(seq,seq_list){
result <- 0
for (epi in seq_list){
tmp <- grepl(seq, epi, fixed = TRUE)
if (tmp == TRUE){
result <- 1
}
}
return(result)
}
list_ <- list()
for (file in files) {
tmp <- read.table(file,header=FALSE)
list_ <- append(list_,tmp)
}
smallest <- 1e10
largest <- 0
all_seq = unlist(list_,use.names = FALSE)
for (seq in all_seq){
size = nchar(seq)
if (size >= largest) {
largest <- size
}
if (size <= smallest) {
smallest <- size
}
}
sprintf("The shortest sequence found is: %s", smallest)
sprintf("The largest sequence found is: %s", largest)
all <- all_possibilities(all_seq,smallest,largest)
print(length(all))
}
WordFrequency <-sort(table(unlist(strsplit(all_seq), ""))))
WordFrequency <-sort(table(unlist(strsplit(all_seq), "")))
WordFrequency <-sort(table(unlist(strsplit(all_seq, ""))))
results_by_size <- function ()
RbS <- transform(all_possibilities, n=nchar(as.character()))
library(epitopeAnalysis)
?results_by_size
?results_by_size
library(epitopeAnalysis)
?results_by_size
